{"version":3,"sources":["components/layout/Navbar.js","components/currencyForm/currency.js","components/layout/Loader.js","context/currency/currencyContext.js","components/layout/Result.js","components/layout/Error.js","components/currencyForm/CurrencyForm.js","context/currency/currencyReducer.js","context/types.js","context/currency/currencyState.js","App.js","index.js"],"names":["Navbar","className","href","value","label","ase_currency_code","Loader","currencyContext","createContext","Result","useContext","CurrencyContext","conversion","toCurrState","rate","currency_name","rate_for_amount","round","x","parseFloat","toFixed","base_currency_name","Error","CurrencyForm","loading","convert","convertError","useState","fromCurr","setFromCurrency","toCurr","setToCurrency","amount","setAmount","errorFromCurr","setFromErrorCurr","errorToCurr","setToErrorCurr","error","setError","customDropStyles","control","styles","state","borderColor","boxShadow","isFocused","option","style","background","isSelected","onSubmit","e","preventDefault","M","toast","html","isNaN","formNoValidate","onChange","selectedOption","console","log","options","Currency","placeholder","type","id","target","htmlFor","action","payload","payload2","CurrencyState","props","useReducer","CurrencyReducer","dispatch","setLoading","Provider","fetch","process","then","response","json","rates","catch","err","children","App","useEffect","AutoInit","ReactDOM","render","document","getElementById"],"mappings":"sPAmBeA,EAhBA,WACX,OACI,yBAAKC,UAAU,iBACX,yBAAKA,UAAU,eACX,uBAAGC,KAAK,aAAaD,UAAU,qBAA/B,WACY,wBAAIA,UAAU,gBAD1B,iB,gBCPD,GAAC,CACRE,MAAO,MACPC,MAAO,+BACR,CACCD,MAAO,MACPC,MAAO,gBACR,CACCD,MAAO,MACPC,MAAO,iBACR,CACCD,MAAO,MACPC,MAAO,iCACR,CACCD,MAAO,MACPC,MAAO,kBACR,CACCD,MAAO,MACPC,MAAO,qBACR,CACCD,MAAO,MACPC,MAAO,qBACR,CACCD,MAAO,MACPC,MAAO,oBACR,CACCC,kBAAmB,MACnBD,MAAO,iBACR,CACCD,MAAO,MACPC,MAAO,kBACR,CACCD,MAAO,MACPC,MAAO,iBACR,CACCD,MAAO,MACPC,MAAO,kBACR,CACCD,MAAO,MACPC,MAAO,oBACR,CACCD,MAAO,MACPC,MAAO,mBACR,CACCD,MAAO,MACPC,MAAO,eACR,CACCD,MAAO,MACPC,MAAO,gBACR,CACCD,MAAO,MACPC,MAAO,gBACR,CACCD,MAAO,MACPC,MAAO,gBACR,CACCD,MAAO,MACPC,MAAO,gBACR,CACCD,MAAO,MACPC,MAAO,kBACR,CACCD,MAAO,MACPC,MAAO,kBACR,CACCD,MAAO,MACPC,MAAO,QACR,CACCD,MAAO,MACPC,MAAO,kBACR,CACCD,MAAO,MACPC,MAAO,iBACR,CACCD,MAAO,MACPC,MAAO,iBACR,CACCD,MAAO,MACPC,MAAO,oBACR,CACCD,MAAO,MACPC,MAAO,iBACR,CACCD,MAAO,MACPC,MAAO,oBACR,CACCD,MAAO,MACPC,MAAO,qBACR,CACCD,MAAO,MACPC,MAAO,kBACR,CACCD,MAAO,MACPC,MAAO,gBACR,CACCD,MAAO,MACPC,MAAO,eACR,CACCD,MAAO,MACPC,MAAO,gBACR,CACCD,MAAO,MACPC,MAAO,mBACR,CACCD,MAAO,MACPC,MAAO,mBACR,CACCD,MAAO,MACPC,MAAO,gBACR,CACCD,MAAO,MACPC,MAAO,mBACR,CACCD,MAAO,MACPC,MAAO,kBACR,CACCD,MAAO,MACPC,MAAO,kBACR,CACCD,MAAO,MACPC,MAAO,oBACR,CACCD,MAAO,MACPC,MAAO,iBACR,CACCD,MAAO,MACPC,MAAO,qBACR,CACCD,MAAO,MACPC,MAAO,eACR,CACCD,MAAO,MACPC,MAAO,kBACR,CACCD,MAAO,MACPC,MAAO,oBACR,CACCD,MAAO,MACPC,MAAO,gBACR,CACCD,MAAO,MACPC,MAAO,mBACR,CACCD,MAAO,MACPC,MAAO,gBACR,CACCD,MAAO,MACPC,MAAO,oBACR,CACCD,MAAO,MACPC,MAAO,eACR,CACCD,MAAO,MACPC,MAAO,gBACR,CACCD,MAAO,MACPC,MAAO,qBACR,CACCD,MAAO,MACPC,MAAO,mBACR,CACCD,MAAO,MACPC,MAAO,kBACR,CACCD,MAAO,MACPC,MAAO,sBACR,CACCD,MAAO,MACPC,MAAO,cACR,CACCD,MAAO,MACPC,MAAO,mBACR,CACCD,MAAO,MACPC,MAAO,mBACR,CACCD,MAAO,MACPC,MAAO,gBACR,CACCD,MAAO,MACPC,MAAO,eACR,CACCD,MAAO,MACPC,MAAO,gBACR,CACCD,MAAO,MACPC,MAAO,iBACR,CACCD,MAAO,MACPC,MAAO,iBACR,CACCD,MAAO,MACPC,MAAO,eACR,CACCD,MAAO,MACPC,MAAO,iBACR,CACCD,MAAO,MACPC,MAAO,oBACR,CACCD,MAAO,MACPC,MAAO,aACR,CACCD,MAAO,MACPC,MAAO,sBACR,CACCD,MAAO,MACPC,MAAO,uBACR,CACCD,MAAO,MACPC,MAAO,kBACR,CACCD,MAAO,MACPC,MAAO,gBACR,CACCD,MAAO,MACPC,MAAO,qBACR,CACCD,MAAO,MACPC,MAAO,qBACR,CACCD,MAAO,MACPC,MAAO,aACR,CACCD,MAAO,MACPC,MAAO,kBACR,CACCD,MAAO,MACPC,MAAO,mBACR,CACCD,MAAO,MACPC,MAAO,uBC1NAE,EAVA,WACX,OACI,yBAAKL,UAAU,2BACX,yBAAKA,UAAU,0BCDZM,EAFSC,0BCuBTC,EAtBA,WAEX,IAAMF,EAAkBG,qBAAWC,GAE3BC,EAA4BL,EAA5BK,WAAY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","file":"static/js/main.465096f6.chunk.js","sourcesContent":["import React from 'react';\n// import PropTypes from 'prop-types';\n\nconst Navbar = () => {\n    return (\n        <nav className=\"nav-bar green\">\n            <div className=\"nav-wrapper\">\n                <a href=\"index.html\" className=\"brand-logo center\">\n                    Currency<br className=\"mobile-only\"/> Converter\n                </a>\n            </div>\n        </nav>\n    )\n}\n\n// Navbar.propTypes = {\n//     addLog: PropTypes.func.isRequired\n// }\n\nexport default Navbar","export default [{\n        value: 'AED',\n        label: 'United Arab Emirates Dirham'\n    }, {\n        value: 'ALL',\n        label: 'Albanian Lek'\n    }, {\n        value: 'AMD',\n        label: 'Armenian Dram'\n    }, {\n        value: 'ANG',\n        label: 'Netherlands Antillean Guilder'\n    }, {\n        value: 'ARS',\n        label: 'Argentine Peso'\n    }, {\n        value: 'AUD',\n        label: 'Australian Dollar'\n    }, {\n        value: 'AZN',\n        label: 'Azerbaijani Manat'\n    }, {\n        value: 'BDT',\n        label: 'Bangladeshi Taka'\n    }, {\n        ase_currency_code: 'BGN',\n        label: 'Bulgarian Lev'\n    }, {\n        value: 'BHD',\n        label: 'Bahraini Dinar'\n    }, {\n        value: 'BND',\n        label: 'Brunei Dollar'\n    }, {\n        value: 'BRL',\n        label: 'Brazilian Real'\n    }, {\n        value: 'BYN',\n        label: 'Belarusian Ruble'\n    }, {\n        value: 'CAD',\n        label: 'Canadian Dollar'\n    }, {\n        value: 'CHF',\n        label: 'Swiss Franc'\n    }, {\n        value: 'CLP',\n        label: 'Chilean Peso'\n    }, {\n        value: 'CNY',\n        label: 'Chinese Yuan'\n    }, {\n        value: 'CZK',\n        label: 'Czech Koruna'\n    }, {\n        value: 'DKK',\n        label: 'Danish Krone'\n    }, {\n        value: 'DZD',\n        label: 'Algerian Dinar'\n    }, {\n        value: 'EGP',\n        label: 'Egyptian Pound'\n    }, {\n        value: 'EUR',\n        label: 'Euro'\n    }, {\n        value: 'GBP',\n        label: 'Pound Sterling'\n    }, {\n        value: 'GEL',\n        label: 'Georgian Lari'\n    }, {\n        value: 'GHS',\n        label: 'Ghanaian Cedi'\n    }, {\n        value: 'HKD',\n        label: 'Hong Kong Dollar'\n    }, {\n        value: 'HRK',\n        label: 'Croatian Kuna'\n    }, {\n        value: 'HUF',\n        label: 'Hungarian Forint'\n    }, {\n        value: 'IDR',\n        label: 'Indonesian Rupiah'\n    }, {\n        value: 'ILS',\n        label: 'Israeli Shekel'\n    }, {\n        value: 'INR',\n        label: 'Indian Rupee'\n    }, {\n        value: 'IQD',\n        label: 'Iraqi Dinar'\n    }, {\n        value: 'IRR',\n        label: 'Iranian Rial'\n    }, {\n        value: 'ISK',\n        label: 'Icelandic Krona'\n    }, {\n        value: 'JOD',\n        label: 'Jordanian Dinar'\n    }, {\n        value: 'JPY',\n        label: 'Japanese Yen'\n    }, {\n        value: 'KES',\n        label: 'Kenyan Shilling'\n    }, {\n        value: 'KGS',\n        label: 'Kyrgystani Som'\n    }, {\n        value: 'KHR',\n        label: 'Cambodian Riel'\n    }, {\n        value: 'KRW',\n        label: 'South Korean Won'\n    }, {\n        value: 'KWD',\n        label: 'Kuwaiti Dinar'\n    }, {\n        value: 'KZT',\n        label: 'Kazakhstani Tenge'\n    }, {\n        value: 'LAK',\n        label: 'Laotian Kip'\n    }, {\n        value: 'LBP',\n        label: 'Lebanese Pound'\n    }, {\n        value: 'LKR',\n        label: 'Sri Lankan Rupee'\n    }, {\n        value: 'LYD',\n        label: 'Libyan Dinar'\n    }, {\n        value: 'MAD',\n        label: 'Moroccan Dirham'\n    }, {\n        value: 'MDL',\n        label: 'Moldovan Leu'\n    }, {\n        value: 'MKD',\n        label: 'Macedonian Denar'\n    }, {\n        value: 'MMK',\n        label: 'Myanma Kyat'\n    }, {\n        value: 'MXN',\n        label: 'Mexican Peso'\n    }, {\n        value: 'MYR',\n        label: 'Malaysian Ringgit'\n    }, {\n        value: 'NOK',\n        label: 'Norwegian Krone'\n    }, {\n        value: 'NPR',\n        label: 'Nepalese Rupee'\n    }, {\n        value: 'NZD',\n        label: 'New Zealand Dollar'\n    }, {\n        value: 'OMR',\n        label: 'Omani Rial'\n    }, { \n        value: 'PHP',\n        label: 'Philippine Peso'\n    }, {\n        value: 'PKR',\n        label: 'Pakistani Rupee'\n    }, {\n        value: 'PLN',\n        label: 'Polish Zloty'\n    }, {\n        value: 'QAR',\n        label: 'Qatari Rial'\n    }, {\n        value: 'RON',\n        label: 'Romanian Leu'\n    }, {\n        value: 'RSD',\n        label: 'Serbian Dinar'\n    }, {\n        value: 'RUB',\n        label: 'Russian Ruble'\n    }, {\n        value: 'SAR',\n        label: 'Saudi Riyal'\n    }, {\n        value: 'SEK',\n        label: 'Swedish Krona'\n    }, {\n        value: 'SGD',\n        label: 'Singapore Dollar'\n    }, {\n        value: 'THB',\n        label: 'Thai Baht'\n    }, {\n        value: 'TJS',\n        label: 'Tajikistani Somoni'\n    }, {\n        value: 'TMT',\n        label: 'Turkmenistani Manat'\n    }, {\n        value: 'TND',\n        label: 'Tunisian Dinar'\n    }, {\n        value: 'TRY',\n        label: 'Turkish Lira'\n    }, {\n        value: 'TWD',\n        label: 'New Taiwan Dollar'\n    }, {\n        value: 'UAH',\n        label: 'Ukrainian Hryvnia'\n    }, {\n        value: 'USD',\n        label: 'US Dollar'\n    }, {\n        value: 'UZS',\n        label: 'Uzbekistan Som'\n    }, {\n        value: 'VND',\n        label: 'Vietnamese Dong'\n    }, {\n        value: 'ZAR',\n        label: 'South African Rand'\n    }\n]","import React from 'react'\n\nconst Loader = () => {\n    return (\n        <div className=\"progress green darken-4\">\n            <div className=\"indeterminate green\">\n\n            </div>\n        </div>\n    )\n}\n\nexport default Loader","import { createContext } from 'react';\n\nconst currencyContext = createContext();\n\nexport default currencyContext;","import React, { Fragment, useContext } from 'react';\nimport CurrencyContext from '../../context/currency/currencyContext';\n\nconst Result = () => {\n\n    const currencyContext = useContext(CurrencyContext);\n\n    const { conversion, toCurrState } = currencyContext;\n\n    const { rate, currency_name, rate_for_amount } = toCurrState;\n\n    const round = (x) => {\n        x = parseFloat(x);\n        x = x.toFixed(2);\n        return x\n    }\n\n    return (\n        <Fragment>\n            <p className=\"flow-text\">1 {conversion.base_currency_name} = {round(rate)} {currency_name}</p>\n            <p className=\"flow-text\">Rate for Amount: <span className=\"green-text\">{round(rate_for_amount)}</span></p>\n        </Fragment>\n    )\n}\n\nexport default Result","import React, { Fragment } from 'react';\n\nconst Error = () => {\n\n    return (\n        <Fragment>\n            <p className=\"flow-text red-text\">\n                Sorry, either the max number of API calls have been reached or something has went wrong. Please try again or come back later.\n            </p>\n        </Fragment>\n    )\n}\n\nexport default Error\n","import React, { useState, useContext } from 'react';\nimport Currency from './currency';\nimport Loader from '../layout/Loader';\nimport Result from '../layout/Result';\nimport Error from '../layout/Error';\nimport CurrencyContext from '../../context/currency/currencyContext';\nimport M from 'materialize-css/dist/js/materialize.min.js';\n\nimport Select from 'react-select';\n\nconst CurrencyForm = () => {\n\n    const currencyContext = useContext(CurrencyContext);\n\n    const { loading, convert, conversion, convertError } = currencyContext;\n\n    // Bring in Currency states\n    const [fromCurr, setFromCurrency] = useState('');\n    const [toCurr, setToCurrency] = useState('');\n    const [amount, setAmount] = useState('');\n    const [errorFromCurr, setFromErrorCurr] = useState(false);\n    const [errorToCurr, setToErrorCurr] = useState(false);\n    const [error, setError] = useState(false);\n\n    const onChange = e => setAmount(e.target.value);\n\n    const handleFromChange = selectedOption => {\n        setFromCurrency(selectedOption.value);\n        console.log(`From selected:`, selectedOption, selectedOption.value);\n    };\n\n    const handleToChange = selectedOption => {\n        setToCurrency(selectedOption.value);\n        console.log(`To selected:`, selectedOption, selectedOption.value);\n    };\n\n    const onSubmit = e => { \n        e.preventDefault();\n\n        if (fromCurr === '' || toCurr === '') {\n            M.toast({ html: 'Please fill in both Currency fields' });\n            if (fromCurr === '') {\n                setFromErrorCurr(true);\n            } else {\n                setFromErrorCurr(false);\n            } \n\n            if (toCurr === '') {\n                setToErrorCurr(true);\n            } else {\n                setToErrorCurr(false);\n            }\n            return false\n        } else {\n            setFromErrorCurr(false);\n            setToErrorCurr(false);\n        }\n\n        if (isNaN(amount) || amount === '') {\n            setError(true);\n            M.toast({ html: 'Please enter a valid number' });\n            return false\n        }\n        setError(false);\n        convert(fromCurr, toCurr, amount);\n    };\n\n    const customDropStyles = {\n        control: (styles, state) => {\n            return {\n                ...styles,\n                '&:hover': { borderColor: '#4CAF50' },\n                '&:focus': { borderColor: '#4CAF50' },\n                '&:focus-within': { borderColor: '#4CAF50' },\n                boxShadow: state.isFocused ? \"0 0 0 0.2rem rgba(120, 194, 173, 0.25)\" : 0,\n            }\n        },\n        option: (style, state) => {\n            return {\n                ...style,\n                background: state.isFocused ? '#4CAF50' : (state.isSelected ? '#388E3C' : 'white'),\n            }\n        }\n    };\n\n    return (\n        <div className=\"row\">\n            <div className=\"col s12 m8 offset-m2\">\n                <div className=\"card\">\n                    <div className=\"card-content\">\n                        <div className=\"row\">\n                            <form onSubmit={onSubmit} className=\"col s12\" formNoValidate=\"\">\n                                <div className=\"row\">\n                                    <div className=\"input-field col s12\">\n                                        <Select\n                                            onChange={handleFromChange}\n                                            options={Currency}\n                                            placeholder=\"Select From Currency\"\n                                            className={`custom-select custom-select-from ${errorFromCurr ? \"drop-down-error\" : \"\"}`}\n                                            styles={customDropStyles}\n                                        />\n                                    </div>\n                                    <div className=\"input-field col s12\">\n                                        <Select\n                                            onChange={handleToChange}\n                                            options={Currency}\n                                            placeholder=\"Select To Currency\"\n                                            className={`custom-select ${errorToCurr ? \"drop-down-error\" : \"\"}`}\n                                            styles={customDropStyles}\n                                        />\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"input-field col s12\">\n                                        <input type=\"text\" id=\"amount\" value={amount} onChange={onChange} className={`validate ${error ? \"amount-error\" : \"\"}`} />\n                                        <label htmlFor=\"amount\">Amount</label>\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"input-field col s12\">\n                                        <button className=\"btn btn-extend waves-effect waves-light green\" type=\"submit\">\n                                            Convert\n                                        </button>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                        <div className=\"row\">\n                            {loading && <Loader/>}\n                            {(conversion && !loading) && (\n                                <Result />\n                            )}\n                            {(convertError && !loading) && (\n                                <Error />\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CurrencyForm","import {\n    SET_LOADING,\n    CONVERT,\n    CONVERT_ERROR\n}  from '../types';\n\nexport default (state, action) => {\n    switch(action.type) {\n        case SET_LOADING:\n            return {\n                ...state,\n                loading: true\n            }\n\n        case  CONVERT:\n            return {\n                ...state,\n                conversion: action.payload,\n                toCurrState: action.payload2,\n                loading: false\n            }\n\n        case CONVERT_ERROR:\n            console.log(action.payload);\n            return {\n                ...state,\n                convertError: action.payload,\n                loading: false\n            }\n\n        default:\n            return state;\n    }\n}","export const SET_LOADING = 'SET_LOADING';\nexport const CONVERT = 'CONVERT';\nexport const CONVERT_ERROR = 'CONVERT_ERROR';","import React, { useReducer } from 'react';\nimport CurrencyContext from './currencyContext';\nimport CurrencyReducer from './currencyReducer';\nimport {\n    SET_LOADING,\n    CONVERT,\n    CONVERT_ERROR\n}  from '../types';\n\nlet apiKey;\nlet proxyurl;\n\napiKey = process.env.REACT_APP_API_KEY;\nproxyurl = process.env.REACT_APP_PROXY_URL;\n\nconst CurrencyState = props => {\n    const initialState = {\n        loading: false,\n        conversion: null,\n        toCurrState: null,\n        convertError: null\n    }\n\n    const [state, dispatch] = useReducer(CurrencyReducer, initialState);\n\n    // Set Loading\n    const setLoading = () => dispatch({type: SET_LOADING });\n\n    // Convert\n    const convert = (fromCurr, toCurr, amount) => {\n        setLoading();\n\n        fetch(`${proxyurl}https://api.getgeoapi.com/api/v2/currency/convert?api_key=${apiKey}&from=${fromCurr}&to=${toCurr}&amount=${amount}&format=json`, {\n            \"method\": \"GET\"\n        })\n        .then((response) => response.json())\n        .then(response => {\n            dispatch({\n                type: CONVERT,\n                payload: response,\n                payload2: response.rates[toCurr]\n            });\n        })\n        .catch(err => {\n            dispatch({\n                type: CONVERT_ERROR,\n                payload: err\n            })\n        });\n    }\n\n    return (\n        <CurrencyContext.Provider\n            value={{\n                loading: state.loading,\n                conversion: state.conversion,\n                toCurrState: state.toCurrState,\n                convertError: state.convertError,\n                setLoading,\n                convert\n            }}\n        >\n            {props.children}\n        </CurrencyContext.Provider>\n    )\n}\n\nexport default CurrencyState","import React, {useEffect} from 'react';\nimport Navbar from './components/layout/Navbar';\nimport CurrencyForm from './components/currencyForm/CurrencyForm';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport M from 'materialize-css/dist/js/materialize.min.js';\nimport './App.css';\nimport CurrencyState from './context/currency/currencyState';\n\nfunction App() {\n  useEffect(() => {\n    // Init Materialize JS\n    M.AutoInit();\n  });\n  return (\n    <CurrencyState>\n        <Navbar/>\n        <section className=\"section section-currency\">\n          <div className=\"container\">\n            <CurrencyForm/>\n          </div>\n        </section>\n    </CurrencyState>\n  );\n}\n\nexport default App;\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}